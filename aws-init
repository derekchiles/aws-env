#!/bin/bash

###########################################################################
#
# aws-init
#
# Author: Derek Chiles <derekch@amazon.com>
#
###########################################################################

# DESCRIPTION
# 
# This file does several things:
#
# 1. It exports the aws_set_region function, allowing the user
#    to quickly switch between AWS Regions
# 2. It exports the aws_set_user function, allowing the user
#    to quickly switch between sets of AWS credentials (typically
#    representing IAM users)
# 3. It sets the bash prompt to include the currently selected AWS
#    user and region. The prompt will look something like this:
#
#   [local-user@local-host] (aws-user@aws-region) working-dir $
#
# CONFIGURING AWS CREDENTIALS
#
# As of the time of this writing there is no defacto standard for
# securing storing multiple AWS credentials. 
#
# USAGE
#
# The typical usage for aws-init is to source it from your ~/.bashrc
# or equivalent. Then you can invoke the aws-set-region, aws-set-user,
# ant aws-set-prompt commands as desired.
#
# Typically, aws-init will be used on a local (non-EC2) machine to
# execute AWS API commands. It could also be loaded on an EC2 instance,
# but EC2 users should prefer IAM roles to authenticate their AWS API
# commands. You can read more about IAM Roles here:
#
#   <url>
#
# aws-init can automatically reset your prompt for you whenever you
# change the AWS user or AWS Region, and this is the default behavior.
# If you would like to disable the auto-setting of your prompt,
# you can set the AWS_AUTO_SET_PROMPT variable to a value of "false"
# and export the variable.
#
# EXAMPLE
#
# Add the following to your ~/.bashrc or equivalent:
#
#     . "${HOME}/bin/aws-init"
#
#     export AWS_AUTO_SET_PROMPT=false
#     export AWS_AUTO_SET_PROMPT=true
#     aws-set-region us-west-2
#     aws-set-user my-aws-user
#
# AWS_INIT_AUTO_SET_PROMPT
# AWS_INIT_VERBOSE
# AWS_INIT_DEBUG
#
#

__ai-log() {
	if [ -n "${AWS_VERBOSE}" ]; then
		echo "$@"
	fi
}

__ai-log-printf() {
	if [ -n "${AWS_VERBOSE}" ]; then
		format="${1}\n"
		shift
		printf "${format}" $@
	fi
}

__ai-failmsg() {
	local message="${1}"
	echo "${0}: $message"
}

__ai-export() {
	__ai-log "Exporting: ${1}=${2}"
	export ${1}="${2}"
}

__ai-require-env-var() {
	local var_name="${1}"
	local var_value

	eval var_value=\$$var_name

	if [ -z "${var_value}" ]; then
		__ai-failmsg "Required environment variable \"${var_name}\" is not defined."
		return 1
	fi
}

__ai-require-file() {
	local filename="${1}"

	if [ ! -e "${filename}" ]; then
		__ai-failmsg "Required file does not exist: \"${filename}\""
		return 1
	elif [ ! -r "${filename}" ]; then
		__ai-failmsg "Required file exists but is not readable: \"${filename}\""
		return 1
	fi
}

__ai-require-bitmask() {
	local filename="${1}"
	local required_bitmask="${2}"
    local file_mode
    local leftover_bits

    __ai-require-file "$filename" || return 1

	file_mode=$(stat -f '0%OLp' ${filename})
	leftover_bits=$(( ${file_mode} & ${required_bitmask} ))
	
    __ai-log "Checking bitmask for file ${filename}"
    __ai-log "Required bitmask: ${required_bitmask}"
    __ai-log-printf "Actual mode: %04o" ${file_mode}
	__ai-log-printf "Leftover bits: %04o" ${leftover_bits}

	if [ $leftover_bits -ne 0 ]; then
		echo "ERROR: The following file has insecure permissions!"
		echo "  ${filename}"
		echo "This file must not be readable by the group/world."
        echo
		echo "Try 'chmod 0600 ${filename}'"
        return 1
	fi
}

__ai-read-credential() {
	local -r __outvar="${1}"
	local -r propname="${2}"
	local -r filename="${3}"
    local key
    local value

	__ai-require-bitmask "${filename}" 0077 || return 1

	while read line; do
		key=$(echo "${line}" | cut -d "=" -f 1)
		value=$(echo "${line}" | cut -d "=" -f 2)

        echo "Checking: [$key] [$propname]"
		if [ "${key}" = "${propname}" ]; then
            echo "Found value for key: $key => $value"
			eval $__outvar=\$value
			return 0
		fi
	done < "${filename}"

	__ai-failmsg "Property \"${propname}\" is not defined in credentials file \"${filename}\""
	return 1
}

aws-set-prompt() {
	local -r NO_COLOR="\[\033[0m\]"
	local -r WHITE="\[\033[1;37m\]"
	local -r GRAY="\[\033[1;30m\]"
	local -r CYAN="\[\033[0;36m\]"
	local -r LIGHT_CYAN="\[\033[1;36m\]"
	local -r RED="\[\033[0;31m\]"
	local -r LIGHT_RED="\[\033[1;31m\]"

	if [ "${AWS_AUTO_SET_PROMPT}" = "true" ]; then
		PS1="${WHITE}[${LIGHT_CYAN}\u${WHITE}@${CYAN}\h${WHITE}]${NO_COLOR}"

		if [ -n "${AWS_USER}" ]; then
			PS1="${PS1} ${WHITE}(${LIGHT_RED}${AWS_USER}${WHITE}@${RED}${AWS_REGION:-us-east-1}${WHITE})${NO_COLOR}"
		fi

		PS1="${PS1} \W \$ "

		export PS1
	fi
}

aws-set-user() {
	__ai-require-env-var "${AWS_AUTH_DIR}"

	if [ $# -ne 1 ]; then
		echo "Usage: aws-set-user <user-name>"
		return 1
	fi

	local -r username="${1}"
	local access_key
	local secret_key
	local cred_file

	#local -r x509_pem="${AWS_AUTH_DIR}/${username}.x509.pem"
	#local -r x509_key="${AWS_AUTH_DIR}/${username}.x509.key"
	cred_file="${AWS_AUTH_DIR}/${username}.awscredentials"

	#__ai-require-file "${x509_pem}"
	#__ai-require-file "${x509_key}"
	#__ai-require-file "${cred_file}"

	__ai-read-credential access_key "AWSAccessKeyID" "${cred_file}" \
        || return 1

	__ai-read-credential secret_key "AWSSecretKey" "${cred_file}" \
        || return 1

	# CLIs that speak RESTful web services will use these:
	__ai-export AWS_USER "${username}"
	__ai-export AWS_ACCESS_KEY "${access_key}"
	#__ai-export AWS_CREDENTIAL_FILE "${cred_file}"
	__ai-export AWS_SECRET_KEY "${secret_key}"

	# Ruby SDK wants these
	__ai-export AWS_ACCESS_KEY_ID "${access_key}"
	__ai-export AWS_SECRET_ACCESS_KEY "${secret_key}"
	__ai-export AWS_CREDENTIAL_FILE "${cred_file}"

	# CLIs that speak legacy SOAP web services will use these:
	#__ai-export EC2_CERT "${x509_pem}"
	#__ai-export EC2_PRIVATE_KEY "${x509_key}"

	aws-set-prompt
	return 0

	echo "aws-set-user: User ${username} is not defined."
	return 1
}

aws-set-region() {
	if [ $# -ne 1 ]; then
		echo "Usage: aws-set-region <region-name>"
		return 1
	elif [ -z "${AWS_USER}" ]; then
		echo "aws-set-region: You must call aws-set-user before invoking this command"
		return 1
	fi

	while read foo region_name region_endpoint; do
		if [ "${region_name}" == "${1}" ]; then
			__ai-export AWS_REGION "${region_name}"
			__ai-export EC2_REGION "${region_name}"
			__ai-export AWS_URL "https://${region_endpoint}"
			__ai-export EC2_URL "https://${region_endpoint}"

			aws-set-prompt
			return 0
		fi
	done < <(ec2-describe-regions)

	echo "$0: Region \"${1}\" does not exist" 
	return 1
}

__ai-require-env-var "${AWS_AUTH_DIR}"
aws-set-prompt

