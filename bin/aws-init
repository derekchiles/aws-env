#!/bin/bash
#
# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://aws.amazon.com/apache2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#
##############################################################################
#
# aws-init
#
# DESCRIPTION
#
# aws-init provides helper functions for users who execute AWS API commands
# 
# the EC2 network. If you are looking for helper functions to run from an
# EC2 instance, please see the ec2-init script.
#
# This file is intended to be sourced via a user's ~/.bashrc at shell
# initialization time. It will provide the following functionality:
#
# 1. It exports the aws-set-region function, allowing the user
#    to quickly switch between AWS Regions
# 2. It exports the aws-set-profile function, allowing the user
#    to quickly switch between sets of AWS credentials (typically
#    representing IAM users)
# 3. It sets the bash prompt to include the currently selected AWS
#    user and region. The prompt will look something like this:
#
#   [local-user@local-host] (aws-user@aws-region) working-dir $
#
# CONFIGURING AWS CREDENTIALS
#
# As of the time of this writing there is no defacto standard for
# securing storing multiple AWS credentials. 
#
# USAGE
#
# The typical usage for aws-init is to source it from your ~/.bashrc
# or equivalent. Then you can invoke the aws-set-region, aws-set-user,
# ant aws-set-prompt commands as desired.
#
# Typically, aws-init will be used on a local (non-EC2) machine to
# execute AWS API commands. It could also be loaded on an EC2 instance,
# but EC2 users should prefer IAM roles to authenticate their AWS API
# commands. You can read more about IAM Roles here:
#
#   http://amzn.to/1hUKkJv
#
# EXAMPLE
#
# Add the following to your ~/.bashrc or equivalent:
#
#     . /path/to/aws-init
#
#     aws-set-profile my-aws-user
#     aws-set-region us-west-2
#
# AWS_INIT_VERBOSE
# AWS_INIT_DEBUG
#

__ai-log() {
	if [ -n "${AWS_VERBOSE}" ]; then
		echo "$@"
	fi
}

__ai-log-printf() {
	if [ -n "${AWS_VERBOSE}" ]; then
		format="${1}\n"
		shift
		printf "${format}" $@
	fi
}

__ai-failmsg() {
	local message="${1}"
	echo "${0}: $message"
}

__ai-export() {
	__ai-log "Exporting: ${1}=${2}"
	export ${1}="${2}"
}

__ai-get-env-var() {
	local __outvar="${1}"
	local env_var_name="${2}"
	local default_value="${3}"

	eval var_value=\$$env_var_name
	if [ -n "${var_value}" ]; then
		\$$__outvar="${var_value}"
	else
		\$$__outvar="${default_value}"
	fi
}

__ai-require-env-var() {
	local var_name="${1}"
	local var_value

	eval var_value=\$$var_name

	if [ -z "${var_value}" ]; then
		__ai-failmsg "Required environment variable \"${var_name}\" is not defined."
		return 1
	fi
}

__ai-require-file() {
	local filename="${1}"

	if [ ! -e "${filename}" ]; then
		__ai-failmsg "Required file does not exist: \"${filename}\""
		return 1
	elif [ ! -r "${filename}" ]; then
		__ai-failmsg "Required file exists but is not readable: \"${filename}\""
		return 1
	fi
}

__ai-require-bitmask() {
	local filename="${1}"
	local required_bitmask="${2}"
	local file_mode
	local leftover_bits

	__ai-require-file "$filename" || return 1

	file_mode=$(stat -f '0%OLp' ${filename})
	leftover_bits=$(( ${file_mode} & ${required_bitmask} ))
	
	__ai-log "Checking bitmask for file ${filename}"
	__ai-log "Required bitmask: ${required_bitmask}"
	__ai-log-printf "Actual mode: %04o" ${file_mode}
	__ai-log-printf "Leftover bits: %04o" ${leftover_bits}

	if [ $leftover_bits -ne 0 ]; then
		echo "ERROR: The following file has insecure permissions!"
		echo "  ${filename}"
		echo "This file must not be readable by the group/world."
        echo
		echo "Try 'chmod 0600 ${filename}'"
        return 1
	fi
}

__ai-update-region-cache() {
	AWS_DEFAULT_REGION=us-east-1 aws ec2 describe-regions \
		--output text | cut -f3 > "${HOME}/.aws/regions"

	if [ $? -ne 0 ]; then
		rm "${HOME}/.aws/regions"
	fi
}

#
# We maintain a cache of the list of region names at ~/.aws/regions
#
# The list of regions should update relatively infrequently. We attempt
# to update it at every script load time (i.e. every login). If the
# cached list is not available then we skip the validation check.
#
__ai-validate-region() {
	local -r region_name="${1}"

	if [ -e ~/.aws/regions ]; then
		grep -q "${region_name}" ~/.aws/regions
		if [ $? -ne 0 ]; then
			echo "Invalid region '${region_name}'"
			return 1
		fi
	fi
}

#
# [profile <profile-name>]
# aws_access_key_id=<id>
# aws_secret_access_key=<key>
#
__ai-validate-profile() {
	local -r filename="${1}"
	local -r profile_name="${2}"

	__ai-require-bitmask "${filename}" 0077 || return 1

	grep -q "\[profile $profile_name\]" "${filename}"
	if [ $? -ne 0 ]; then
		echo "Invalid profile '${profile_name}'"
		return 1
	fi
}

__aws-set-region-completer() {
	local regions
	local cur="${COMP_WORDS[COMP_CWORD]}"

	if [ -e ~/.aws/regions ]; then
		read -d '' -r -a regions < ~/.aws/regions
		COMPREPLY=( $(compgen -W '${regions[@]}' -- $cur) )
	fi
}

__aws-set-profile-completer() {
	local config_file="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"

	local cur="${COMP_WORDS[COMP_CWORD]}"
	profiles=( $(grep profile ${config_file} \
		| cut -d' ' -f2 | cut -d] -f1 ) )

	COMPREPLY=( $(compgen -W '${profiles[@]}' -- $cur) )
}

#
# Set the prompt to look something like this:
#
# [local-user@local-host] (aws-profile@aws-region) <wd> $
#
__ai-set-prompt() {
	local -r NO_COLOR="\[\033[0m\]"
	local -r WHITE="\[\033[1;37m\]"
	local -r GRAY="\[\033[1;30m\]"
	local -r CYAN="\[\033[0;36m\]"
	local -r LIGHT_CYAN="\[\033[1;36m\]"
	local -r RED="\[\033[0;31m\]"
	local -r LIGHT_RED="\[\033[1;31m\]"

	# [local-user
	PS1="${WHITE}[${LIGHT_CYAN}\u${WHITE}"

	# @local-host]
	PS1="${PS1}@${CYAN}\h${WHITE}]${NO_COLOR}"

	# (aws-profile
	PS1="${PS1} ${WHITE}(${LIGHT_RED}\$(echo \${AWS_DEFAULT_PROFILE:-default})${WHITE}"

	# @aws-region)
	PS1="${PS1}@${RED}\$(echo \${AWS_DEFAULT_REGION:-no-region})${WHITE})${NO_COLOR}"

	# <wd> $
	PS1="${PS1} \W \$ "

	export PS1
}

aws-set-profile() {
	if [ $# -ne 1 ]; then
		echo "Usage: aws-set-profile <profile-name>"
		return 1
	fi

	local -r profile="${1}"

	local config_file="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"
	__ai-validate-profile "${config_file}" "${profile}" || return 1

	# New AWS CLI
	__ai-export AWS_DEFAULT_PROFILE "${profile}"
}

aws-set-region() {
	if [ $# -ne 1 ]; then
		echo "Usage: aws-set-region <region-name>"
		return 1
	fi

	local -r region="${1}"

	__ai-validate-region "${region}" || return 1
	__ai-export AWS_DEFAULT_REGION "${region}"
}

#
# Update the region cache in a forked process, to avoid hanging in case
# we don't have network access
#
nohup -- bash -c "$(declare -f __ai-update-region-cache); __ai-update-region-cache" > /dev/null 2>&1 0</dev/null

#
#
#
#if [ -z "${AWS_DEFAULT_REGION}" ]; then
	#aws-set-region us-east-1
#fi

complete -F __aws-set-region-completer aws-set-region
complete -F __aws-set-profile-completer aws-set-profile

__ai-set-prompt

